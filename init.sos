[global]
output_dirname = "metadata"

cfg = CONFIG
print("CONFIG", cfg)


[101]
output: f"{output_dirname}/ec2_instance.json"

python: expand=True
    import json
    import ec2_setup

    cfg_str = "{cfg}"
    # https://stackoverflow.com/questions/988228/convert-a-string-representation-of-a-dictionary-to-a-dictionary
    cfg = json.loads(cfg_str.replace("'", "\""))

    ec2_instance = ec2_setup.launch_instance(cfg)

    with open("{_output}", "w") as fp:
        json.dump(ec2_instance, fp)
        print(f"ec2_instance metadata saved: {_output}")


[102]
input: f"{output_dirname}/ec2_instance.json"

python: expand=True
    import json
    import ec2_setup    

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)
        print("ec2_instance metadata loaded")

    ec2_setup.wait_for_status_checks(ec2_instance)
    print(f"ec2_instance now ready: status checks OK")


[103]
input: f"{output_dirname}/ec2_instance.json"
output: f"{output_dirname}/ebs_volume.json"

python: expand=True
    import json
    import ec2_setup

    cfg_str = "{cfg}"
    cfg = json.loads(cfg_str.replace("'", "\""))

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)
        print("ec2_instance metadata loaded")

    ebs_volume = ec2_setup.create_volume(cfg, ec2_instance)

    with open("{_output}", "w") as fp:
        json.dump(ebs_volume, fp)
        print(f"ebs_volume metadata saved: {_output}")

    device = ec2_setup.attach_volume(ebs_volume, ec2_instance)


[104]
input: f"{output_dirname}/ec2_instance.json"
output: f"{output_dirname}/ec2_hostname_data.txt"
depends: sos_step("102")

python: expand=True
    import json

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)

    ec2_data = ec2_instance['public_dns_name'] + "," + ec2_instance['public_ip']
    with open("{_output}", "w") as f:
        f.write(ec2_data)
        print(f"ec2_hostname_data saved: {_output}")


[105]
input: f"{output_dirname}/ec2_hostname_data.txt"

sh: expand=True
    ec2_hostname_data=$(<$PWD/{_input})

    # -H is for hashing the hostname inside known_hosts
    ssh-keyscan -H -t ecdsa -v $ec2_hostname_data >> ~/.ssh/known_hosts

    # BEWARE:
    # If an ssh_known_hosts file is constructed using ssh-keyscan without verifying the keys, users will be vulnerable to man in the middle attacks.  
    # On the other hand, if the security model allows such a risk, ssh-keyscan can help in the detection of tampered keyfiles or man in the middle attacks which have begun after the ssh_known_hosts file was created.


[106]
input: f"{output_dirname}/ec2_instance.json"
depends: sos_step("105")

python: expand=True
    import json
    import pathlib
    import os
    import shutil
    import time
    import yaml

    hosts_path = pathlib.Path("~/.sos/hosts.yml").expanduser()

    with open(hosts_path, "r") as fp:
        hosts = yaml.load(fp, Loader=yaml.FullLoader)

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)
    
    hosts['hosts']['ec2']['address'] = "ec2-user@" + ec2_instance["public_ip"]
    hosts['hosts']['ec2']['paths']['home'] = "/home/ec2-user/"

    local = hosts['localhost']
    hosts['hosts'][local]['paths']['home'] = os.getcwd()

    hosts_bkp = hosts_path.with_name("hosts." + str(int(time.time())) + ".yml")

    shutil.copy(hosts_path, hosts_bkp)
    
    with open(hosts_path, "w") as f:
        yaml.dump(hosts, f, default_flow_style=False)


[107]
depends: sos_step("106")

python: expand=True
    import pathlib
    import subprocess
    import yaml

    hosts_path = pathlib.Path("~/.sos/hosts.yml").expanduser()

    with open(hosts_path, "r") as fp:
        hosts = yaml.load(fp, Loader=yaml.FullLoader)

    ec2_addr = hosts['hosts']['ec2']['address']
    pem_file = hosts['hosts']['ec2']['pem_file']

    cmd_args = ("scp", "-i", pem_file, "install_miniconda_sos.sh", ec2_addr + ":~/")
    print(cmd_args)
    p = subprocess.run(cmd_args)
    print("subprocess output:", p)

    cmd_args = ("ssh", ec2_addr, "-v", "-i", pem_file, "-t", "source install_miniconda_sos.sh")
    print(cmd_args)
    p = subprocess.run(cmd_args)
    print("subprocess output:", p)


[108]
depends: sos_step("107")

sh: expand=True
    sos run -c config.yml remote.sos start -v4