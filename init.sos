[global]
output_dirname = "metadata"
config_ec2_yml = f"{output_dirname}/config_with_ec2_host.yml"

cfg = CONFIG
print("CONFIG", cfg)


[101]
output: f"{output_dirname}/ec2_instance.json"

python: expand=True
    import os
    import sys
    # workaround to make "ec2_setup" directory importable within SoS python blocks
    # cwd was in sys.path, so we need to append it
    # https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html#case-2-syspath-could-change
    # TODO: turn ec2_setup into a proper python package and then install and import it
    sys.path.append(os.getcwd())

    import json
    cfg_str = "{cfg}"
    # https://stackoverflow.com/questions/988228/convert-a-string-representation-of-a-dictionary-to-a-dictionary
    cfg = json.loads(cfg_str.replace("'", "\""))

    import ec2_setup
    ec2_instance = ec2_setup.launch_instance(cfg)

    with open("{_output}", "w") as fp:
        json.dump(ec2_instance, fp)
        print(f"ec2_instance metadata saved: {_output}")


[102]
input: f"{output_dirname}/ec2_instance.json"

python: expand=True
    import os
    import sys
    sys.path.append(os.getcwd())

    import json
    cfg_str = "{cfg}"
    cfg = json.loads(cfg_str.replace("'", "\""))

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)
        print("ec2_instance metadata loaded")

    import ec2_setup
    ec2_setup.wait_for_status_checks(ec2_instance)
    print(f"ec2_instance now ready: status checks OK")


[103]
input: f"{output_dirname}/ec2_instance.json"
output: f"{output_dirname}/ebs_volume.json"

python: expand=True
    import os
    import sys
    sys.path.append(os.getcwd())

    import json
    cfg_str = "{cfg}"
    cfg = json.loads(cfg_str.replace("'", "\""))

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)
        print("ec2_instance metadata loaded")

    import ec2_setup
    ebs_volume = ec2_setup.create_volume(cfg, ec2_instance)

    with open("{_output}", "w") as fp:
        json.dump(ebs_volume, fp)
        print(f"ebs_volume metadata saved: {_output}")

    device = ec2_setup.attach_volume(ebs_volume, ec2_instance)


[104]
input: f"{output_dirname}/ec2_instance.json"
output: f"{output_dirname}/ec2_hostname_data.txt"
depends: sos_step("102")

python: expand=True
    import json
    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)

    ec2_data = ec2_instance['public_dns_name'] + "," + ec2_instance['public_ip']
    with open("{_output}", "w") as f:
        f.write(ec2_data)
        print(f"ec2_hostname_data saved: {_output}")


[105]
input: f"{output_dirname}/ec2_hostname_data.txt"

sh: expand=True
    ec2_hostname_data=$(<$PWD/{_input})

    # -H is for hashing the hostname inside known_hosts
    ssh-keyscan -H -t ecdsa -v $ec2_hostname_data >> ~/.ssh/known_hosts

    # BEWARE:
    # If an ssh_known_hosts file is constructed using ssh-keyscan without verifying the keys, users will be vulnerable to man in the middle attacks.  
    # On the other hand, if the security model allows such a risk, ssh-keyscan can help in the detection of tampered keyfiles or man in the middle attacks which have begun after the ssh_known_hosts file was created.


[106]
input: f"{output_dirname}/ec2_instance.json"
output: f"{config_ec2_yml}"
depends: sos_step("105")

python: expand=True
    import json
    cfg_str = "{cfg}"
    cfg = json.loads(cfg_str.replace("'", "\""))

    with open("{_input}", "r") as fp:
        ec2_instance = json.load(fp)
    
    cfg['hosts']['ec2']['address'] = "ec2-user@" + ec2_instance["public_ip"]
    
    import os
    cfg['hosts']['local']['paths']['home'] = os.getcwd()

    import yaml
    with open("{_output}", "w") as f:
        yaml.dump(cfg, f, default_flow_style=False)


[107]
input: f"{config_ec2_yml}"

python: expand=True
    import yaml
    with open("{_input}", "r") as fp:
        cfg_ec2 = yaml.load(fp, Loader=yaml.FullLoader)
    # print(cfg_ec2)

    ec2_addr = cfg_ec2['hosts']['ec2']['address']
    # print(ec2_addr)
    pem_file = cfg_ec2['hosts']['ec2']['pem_file']
    # print(pem_file)

    import subprocess
    cmd_args = ("scp", "-i", pem_file, "install_miniconda_sos.sh", ec2_addr + ":~/")
    print(cmd_args)
    p = subprocess.run(cmd_args)
    print(p)

    cmd_args = ("ssh", ec2_addr, "-v", "-i", pem_file, "-t", "source install_miniconda_sos.sh")
    print(cmd_args)
    p = subprocess.run(cmd_args)
    print(p)


[108]
input: f"{config_ec2_yml}"
depends: sos_step("107")

sh: expand=True
    sos run -c {_input} remote.sos start -v4